package uotp

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func TestPopulateKeyAndIV(t *testing.T) {
	input := []byte{0, 1, 2}
	keyAnswer := []byte{
		0x33, 0xDA, 0x4D, 0x91, 0xF7, 0x6E, 0xF7, 0xDF, 0x6B, 0xD5, 0x17, 0x0E, 0xE0, 0x8F, 0x05, 0x4A,
	}
	ivAnswer := []byte{
		0xE6, 0xFA, 0x25, 0xB4, 0xF9, 0xB4, 0x25, 0x61, 0xA4, 0xA2, 0x0A, 0xE1, 0x92, 0x77, 0xCB, 0x16,
	}

	var key, iv [16]byte
	populateKeyAndIV(key[:], iv[:], input)

	if !bytes.Equal(key[:], keyAnswer) {
		t.Errorf("key is not matched\n%s", hex.Dump(key[:]))
	}

	if !bytes.Equal(iv[:], ivAnswer) {
		t.Errorf("iv is not matched\n%s", hex.Dump(iv[:]))
	}
}

func TestEncryptWithSharedKey(t *testing.T) {
	sharedKey := []byte{
		0x30, 0x66, 0x31, 0x63, 0x37, 0x64, 0x36, 0x63, 0x37, 0x35, 0x64, 0x33, 0x31, 0x33, 0x63, 0x34,
		0x30, 0x31, 0x39, 0x38, 0x31, 0x35, 0x37, 0x33, 0x34, 0x61, 0x31, 0x61, 0x32, 0x36, 0x31, 0x61,
		0x61, 0x61, 0x61, 0x34, 0x38, 0x37, 0x62, 0x39, 0x62, 0x30, 0x31, 0x34, 0x33, 0x34, 0x63, 0x31,
		0x65, 0x36, 0x66, 0x64, 0x38, 0x62, 0x38, 0x66, 0x32, 0x32, 0x34, 0x39, 0x62, 0x66, 0x37, 0x35,
	}
	inputData := []byte{
		0x4B, 0x54, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x4D,
		0x2D, 0x47, 0x39, 0x35, 0x35, 0x4C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x47, 0x41,
		0x31, 0x35, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30,
	}
	outputData := []byte{
		0x4A, 0x3D, 0x4B, 0x0B, 0x83, 0xDF, 0x2F, 0xAF, 0xCE, 0x67, 0xDE, 0x25, 0xD4, 0x7C, 0x16, 0x7F,
		0xD2, 0xC5, 0xC3, 0xA0, 0xA4, 0xAE, 0xE0, 0xA3, 0x93, 0x07, 0xCF, 0xB4, 0x76, 0x46, 0xCE, 0x28,
		0x70, 0x72, 0xD5, 0x09, 0x26, 0xF2, 0x64, 0x2B, 0xAB, 0x88, 0xDB, 0xDB, 0x67, 0x03, 0xC8, 0x7A,
	}

	outDate, err := encrypt(sharedKey, inputData)
	if err != nil {
		t.Errorf("%+v\n", err)
		return
	}
	if !bytes.Equal(outDate, outputData) {
		t.Errorf("outData is not matched\n%s", hex.Dump(outDate))
	}

	outDate, err = decrypt(sharedKey, outDate)
	if err != nil {
		t.Errorf("%+v\n", err)
		return
	}
	if !bytes.Equal(outDate, inputData) {
		t.Errorf("outData is not matched\n%s", hex.Dump(outDate))
	}
}

func TestDecryptWithSharedKey(t *testing.T) {
	sharedKey := []byte{
		0x30, 0x66, 0x31, 0x63, 0x37, 0x64, 0x36, 0x63, 0x37, 0x35, 0x64, 0x33, 0x31, 0x33, 0x63, 0x34,
		0x30, 0x31, 0x39, 0x38, 0x31, 0x35, 0x37, 0x33, 0x34, 0x61, 0x31, 0x61, 0x32, 0x36, 0x31, 0x61,
		0x61, 0x61, 0x61, 0x34, 0x38, 0x37, 0x62, 0x39, 0x62, 0x30, 0x31, 0x34, 0x33, 0x34, 0x63, 0x31,
		0x65, 0x36, 0x66, 0x64, 0x38, 0x62, 0x38, 0x66, 0x32, 0x32, 0x34, 0x39, 0x62, 0x66, 0x37, 0x35,
	}
	inputData := []byte{
		0x3A, 0x02, 0x36, 0x1E, 0xCE, 0x8B, 0x35, 0x25, 0xA4, 0x72, 0xA2, 0x3E, 0xB2, 0xA9, 0xF1, 0xB2,
		0x1E, 0x78, 0xB4, 0x76, 0xA0, 0xBD, 0x44, 0xAF, 0x07, 0xF0, 0xD7, 0x0F, 0xA4, 0xE2, 0x0A, 0xE1,
		0xEC, 0x96, 0x10, 0x6E, 0x2C, 0xF5, 0x5C, 0x00, 0xBC, 0xAB, 0x02, 0x0E, 0xF0, 0x7B, 0x81, 0xD3,
		0x5C, 0x8E, 0xD6, 0xDC, 0xBC, 0x23, 0x9C, 0x3D, 0xCF, 0xEB, 0x6B, 0xC5, 0xD7, 0x8B, 0x6B, 0xEB,
		0x65, 0x22, 0x7C, 0xFA, 0x41, 0x0B, 0x1F, 0xA7, 0x02, 0x10, 0xFD, 0xCA, 0xB1, 0xE9, 0xFA, 0xE9,
		0x10, 0x08, 0x8C, 0x7D, 0x6C, 0x4A, 0x2A, 0x45, 0x09, 0x3C, 0x39, 0xFC, 0x78, 0xD1, 0x7E, 0x2B,
		0x56, 0xB8, 0x99, 0x6E, 0xCD, 0x9E, 0x53, 0x79, 0xF6, 0x34, 0x2A, 0x10, 0x07, 0xE8, 0x98, 0x62,
		0xD2, 0x3D, 0x7E, 0xBE, 0x19, 0x66, 0x7B, 0x6B, 0xE3, 0x34, 0x28, 0xF1, 0x12, 0x83, 0xF6, 0x4F,
		0xED, 0x49, 0x02, 0x3E, 0x4F, 0xB5, 0x68, 0xDF, 0xFD, 0x6A, 0x29, 0x59, 0x3E, 0x9E, 0x79, 0x94,
		0x84, 0x1C, 0x36, 0x08, 0x05, 0x1F, 0x09, 0xAE, 0x64, 0x04, 0x7C, 0x15, 0x02, 0xCF, 0xA4, 0xEC,
		0x86, 0x17, 0x22, 0x57, 0x16, 0x6A, 0x02, 0xB7, 0x29, 0x91, 0x50, 0x30, 0x93, 0xD6, 0xAF, 0xFF,
		0x79, 0x1E, 0xE6, 0xFF, 0x14, 0x60, 0xEB, 0xEE, 0x85, 0x0F, 0xEB, 0xCE, 0x83, 0x91, 0x53, 0xF3,
		0x4F, 0x0F, 0xCD, 0x5F, 0x71, 0xAD, 0x72, 0x31, 0xE5, 0x2D, 0x7A, 0x4C, 0xBE, 0x11, 0x95, 0xE3,
		0xBD, 0xB0, 0xC2, 0xA8, 0xD0, 0x42, 0x44, 0x9D, 0x5B, 0x6D, 0x45, 0xE7, 0x3C, 0x23, 0x4B, 0x2F,
	}
	outputData := []byte{
		0x31, 0x37, 0x38, 0x34, 0x35, 0x33, 0x36, 0x35, 0x36, 0x32, 0x36, 0x31, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x36, 0x33, 0x30, 0x39, 0x38, 0x31, 0x37, 0x38, 0x31, 0x62,
		0x61, 0x39, 0x30, 0x30, 0x34, 0x61, 0x64, 0x33, 0x66, 0x66, 0x63, 0x63, 0x65, 0x33, 0x34, 0x39,
		0x38, 0x38, 0x30, 0x38, 0x61, 0x62, 0x36, 0x61, 0x36, 0x35, 0x65, 0x34, 0x63, 0x38, 0x61, 0x38,
		0x61, 0x61, 0x65, 0x66, 0x36, 0x62, 0x62, 0x39, 0x39, 0x65, 0x62, 0x38, 0x35, 0x30, 0x65, 0x36,
		0x62, 0x64, 0x33, 0x36, 0x30, 0x37, 0x31, 0x37, 0x61, 0x39, 0x38, 0x62, 0x62, 0x62, 0x37, 0x32,
		0x62, 0x38, 0x62, 0x33, 0x30, 0x32, 0x32, 0x30, 0x36, 0x30, 0x33, 0x39, 0x39, 0x35, 0x64, 0x32,
		0x62, 0x30, 0x32, 0x61, 0x61, 0x38, 0x33, 0x37, 0x66, 0x63, 0x62, 0x66, 0x35, 0x62, 0x30, 0x34,
		0x36, 0x30, 0x64, 0x37, 0x36, 0x31, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}

	outDate, err := decrypt(sharedKey, inputData)
	if err != nil {
		t.Errorf("%+v\n", err)
		return
	}
	if !bytes.Equal(outDate, outputData) {
		t.Errorf("outData is not matched\n%s", hex.Dump(outDate))
	}
}
